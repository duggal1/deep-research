import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs/server';
import { PrismaClient } from '@prisma/client';
import { v4 as uuidv4 } from 'uuid';

const prisma = new PrismaClient();

// Helper function to get or create user
async function getOrCreateUser(clerkUserId: string | null) {
  // If we have a clerk ID, try to find the user
  if (clerkUserId) {
    // Find user by Clerk ID first
    const existingUser = await prisma.user.findUnique({
      where: { clerkId: clerkUserId },
    });
    
    if (existingUser) {
      return existingUser;
    }
  }
  
  // If no user found or no clerk ID, create a temporary user with custom_id
  // Note: In a real app, you'd want to get more user info before creating
  const tempUser = await prisma.user.create({
    data: {
      email: `temp-${uuidv4()}@example.com`, // Temporary email
      name: "Anonymous User",
      // custom_id is auto-generated by Prisma
      clerkId: clerkUserId, // May be null
    },
  });
  
  return tempUser;
}

// GET /api/search-history - Fetch user's search history
export async function GET(request: Request) {
  const { userId: clerkUserId } = await auth();
  
  try {
    // Get user by clerk ID or create a temporary user
    const user = await getOrCreateUser(clerkUserId);
    
    const history = await prisma.searchHistory.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
      take: 15,
      select: {
        id: true,
        query: true,
        createdAt: true,
      },
    });
    
    return NextResponse.json(history);
  } catch (error) {
    console.error('Error fetching search history:', error);
    return NextResponse.json({ error: 'Failed to fetch search history' }, { status: 500 });
  }
}

// POST /api/search-history - Add a new search query
export async function POST(request: Request) {
  const { userId: clerkUserId } = await auth();
  
  try {
    const { query } = await request.json();

    if (!query || typeof query !== 'string' || query.trim().length === 0) {
      return NextResponse.json({ error: 'Invalid query provided' }, { status: 400 });
    }

    // Get or create user
    const user = await getOrCreateUser(clerkUserId);

    // Create search history entry
    const newEntry = await prisma.searchHistory.create({
      data: {
        query: query.trim(),
        userId: user.id, // Use the user's primary ID, not clerk ID
      },
      select: {
        id: true,
        query: true,
        createdAt: true,
      }
    });
    
    return NextResponse.json(newEntry, { status: 201 });
  } catch (error) {
    console.error('Error saving search history:', error);
    return NextResponse.json({ error: 'Failed to save search history' }, { status: 500 });
  }
}

// DELETE /api/search-history - Clear user's search history
export async function DELETE(request: Request) {
  const { userId: clerkUserId } = await auth();
  
  try {
    // Get user by clerk ID or create a temporary user
    const user = await getOrCreateUser(clerkUserId);
    
    await prisma.searchHistory.deleteMany({
      where: { userId: user.id },
    });
    
    return NextResponse.json({ message: 'Search history cleared' }, { status: 200 });
  } catch (error) {
    console.error('Error clearing search history:', error);
    return NextResponse.json({ error: 'Failed to clear search history' }, { status: 500 });
  }
} 